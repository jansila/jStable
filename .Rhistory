cat("\nparameters:", alpha,beta,gamma,delta,"\n")
var<-jStable::quantStable(signif,alpha=alpha,beta=beta,gamma=1,delta=0)
B<-c(-sign(var))*beta
Th<-(atan(B*tan(pi*alpha*0.5)))/alpha
cat("VaR is:", var, "\nB value:", B, " Th value is: ",Th,"\n")
if(var==0){
if(beta==0){
es<-(2*gamma(alpha/(alpha-1)))/pi
return(es)
}
es<-(2*gamma(alpha/(alpha-1))/(pi-2*Th))*(cos(Th)/cos(alpha*Th)^(1/alpha))
#there could be (cos(alpha)*Th)^1/alpha hard to say
ans<-list("ES"=-es, "VaR"=-var)
class(ans)<-"ES"
return(ans)
}
int<-integrate(i,lower=-Th,upper=pi/2,Th=Th,alpha=alpha,var=var, subdivisions=200L)
es<-(alpha/(alpha-1))*(abs(var)/(pi*signif))*int$value*gamma-delta
ans<-list("ES"=-es, "VaR"=-var,"abs.error"=int$abs.error,"subdiv"=int$subdivisions)
class(ans)<-"ES"
return(ans)
}
esStable<-function(signif,alpha=1.8,beta=0,gamma=1,delta=0){
if(alpha<1 || beta<-1 || beta>1){stop("alpha has to be greater than 1, and\or beta is out of unit circle")}
cat("\nparameters:", alpha,beta,gamma,delta,"\n")
var<-jStable::quantStable(signif,alpha=alpha,beta=beta,gamma=1,delta=0)
B<-c(-sign(var))*beta
Th<-(atan(B*tan(pi*alpha*0.5)))/alpha
cat("VaR is:", var, "\nB value:", B, " Th value is: ",Th,"\n")
int<-integrate(i,lower=-Th,upper=pi/2,Th=Th,alpha=alpha,var=var, subdivisions=200L)
es<-(alpha/(alpha-1))*(abs(var)/(pi*signif))*int$value*gamma-delta
ans<-list("ES"=-es, "VaR"=-var,"abs.error"=int$abs.error,"subdiv"=int$subdivisions)
class(ans)<-"ES"
return(ans)
}
esStable<-function(signif,alpha=1.8,beta=0,gamma=1,delta=0){
if(alpha<1 || beta<(-1) || beta>1){stop("alpha has to be greater than 1, and\or beta is out of unit circle")}
cat("\nparameters:", alpha,beta,gamma,delta,"\n")
var<-jStable::quantStable(signif,alpha=alpha,beta=beta,gamma=1,delta=0)
B<-c(-sign(var))*beta
Th<-(atan(B*tan(pi*alpha*0.5)))/alpha
cat("VaR is:", var, "\nB value:", B, " Th value is: ",Th,"\n")
int<-integrate(i,lower=-Th,upper=pi/2,Th=Th,alpha=alpha,var=var, subdivisions=200L)
es<-((alpha/(alpha-1))*(abs(var)/(pi*signif))*(int$value)*gamma)-delta
ans<-list("ES"=-es, "VaR"=-var,"abs.error"=int$abs.error,"subdiv"=int$subdivisions)
class(ans)<-"ES"
return(ans)
}
esStable<-function(signif,alpha=1.8,beta=0,gamma=1,delta=0){
if(alpha<1 || beta<(-1) || beta>1){stop("alpha has to be greater than 1, and\or beta is out of unit circle")}
#  cat("\nparameters:", alpha, beta, gamma, delta,"\n")
var<-jStable::quantStable(signif,alpha=alpha,beta=beta,gamma=1,delta=0)
B<-c(-sign(var))*beta
Th<-(atan(B*tan(pi*alpha*0.5)))/alpha
cat("VaR is:", var, "\nB value:", B, " Th value is: ",Th,"\n")
int<-integrate(i,lower=-Th,upper=pi/2,Th=Th,alpha=alpha,var=var, subdivisions=200L)
es<-((alpha/(alpha-1))*(abs(var)/(pi*signif))*(int$value)*gamma)-delta
ans<-list("ES"=-es, "VaR"=-var,"abs.error"=int$abs.error,"subdiv"=int$subdivisions)
class(ans)<-"ES"
return(ans)
}
esStable<-function(signif,alpha=1.8,beta=0,gamma=1,delta=0){
if(alpha<1 || beta<(-1) || beta>1){stop("alpha has to be greater than 1, and\or beta is out of unit circle")}
cat("\nparameters:", alpha, beta, gamma, delta,"\n")
var<-jStable::quantStable(signif,alpha=alpha,beta=beta,gamma=1,delta=0)
B<-c(-sign(var))*beta
Th<-(atan(B*tan(pi*alpha*0.5)))/alpha
cat("VaR is:", var, "\nB value:", B, " Th value is: ",Th,"\n")
int<-integrate(i, lower=-Th, upper=pi/2, Th=Th, alpha=alpha, var=var, subdivisions=200L)
es<-((alpha/(alpha-1))*(abs(var)/(pi*signif))*(int$value)*gamma)-delta
ans<-list("ES"=-es, "VaR"=-var,"abs.error"=int$abs.error,"subdiv"=int$subdivisions)
class(ans)<-"ES"
ans
}
rm(list=ls())
esStable<-function(signif,alpha=1.8,beta=0,gamma=1,delta=0){
if(alpha<1 || beta<(-1) || beta>1){stop("alpha has to be greater than 1, and\or beta is out of unit circle")}
cat("\nparameters:", alpha, beta, gamma, delta,"\n")
var<-jStable::quantStable(signif,alpha=alpha,beta=beta,gamma=1,delta=0)
B<-c(-sign(var))*beta
Th<-(atan(B*tan(pi*alpha*0.5)))/alpha
cat("VaR is:", var, "\nB value:", B, " Th value is: ",Th,"\n")
int<-integrate(i, lower=-Th, upper=pi/2, Th=Th, alpha=alpha, var=var, subdivisions=200L)
es<-((alpha/(alpha-1))*(abs(var)/(pi*signif))*(int$value)*gamma)-delta
ans<-list("ES"=-es, "VaR"=-var,"abs.error"=int$abs.error,"subdiv"=int$subdivisions)
class(ans)<-"ES"
ans
}
V<-function(theta,Th,alpha){
(cos(alpha*Th)^(1/(alpha-1)))*((cos(theta)/sin(alpha*(Th+theta)))^(alpha/(alpha-1)))*(cos(alpha*Th+(alpha-1)*theta)/cos(theta))
}
g<-function(theta,alpha,Th){
(sin(alpha*(Th+theta)-2*theta)/(sin(alpha*(Th+theta))))-(alpha*cos(theta)*cos(theta))/(sin(alpha*(Th+theta))*sin(alpha*(Th+theta)))
}
i<-function(theta,Th,alpha,var){
g(theta,Th,alpha)*exp(V(theta,Th,alpha)*(-abs(var)^(alpha/(alpha-1))))
}
ib<-function(theta,Th,alpha,var){
gb(theta,Th,alpha)*exp(V(theta,Th,alpha)*(-abs(var)^(alpha/(alpha-1))))
}
Vb<-function(theta,alpha){((cos(theta)/sin(alpha*theta))^(alpha/(alpha-1)))*(cos(theta*(alpha-1))/cos(theta))}
gb<-function(theta,alpha){((sin((alpha-2)*theta))/sin(alpha*theta))-(alpha*cos(theta)*cos(theta))/(sin(alpha*theta)*sin(alpha*theta))}
esStable<-function(signif,alpha=1.8,beta=0,gamma=1,delta=0){
if(alpha<1 || beta<(-1) || beta>1){stop("alpha has to be greater than 1, and\or beta is out of unit circle")}
cat("\nparameters:", alpha, beta, gamma, delta,"\n")
var<-jStable::quantStable(signif,alpha=alpha,beta=beta,gamma=1,delta=0)
B<-c(-sign(var))*beta
Th<-(atan(B*tan(pi*alpha*0.5)))/alpha
cat("VaR is:", var, "\nB value:", B, " Th value is: ",Th,"\n")
int<-integrate(i, lower=-Th, upper=pi/2, Th=Th, alpha=alpha, var=var, subdivisions=200L)
es<-((alpha/(alpha-1))*(abs(var)/(pi*signif))*(int$value)*gamma)-delta
ans<-list("ES"=-es, "VaR"=-var,"abs.error"=int$abs.error,"subdiv"=int$subdivisions)
class(ans)<-"ES"
ans
}
esStable<-function(signif,alpha=1.8,beta=0,gamma=1,delta=0){
if(alpha<1 || beta<(-1) || beta>1){stop("alpha has to be greater than 1, and\or beta is out of unit circle")}
cat("\nparameters:", alpha, beta, gamma, delta,"\n")
var<-jStable::quantStable(signif,alpha=alpha,beta=beta,gamma=1,delta=0)
B<-c(-sign(var))*beta
Th<-(atan(B*tan(pi*alpha*0.5)))/alpha
cat("VaR is:", var, "\nB value:", B, " Th value is: ",Th,"\n")
int<-integrate(i, lower=-Th, upper=pi/2, Th=Th, alpha=alpha, var=var, subdivisions=200L)
es<-(((alpha/(alpha-1))*(abs(var)/(pi*signif))*(int$value)*gamma)-delta)
ans<-list("ES"=-es, "VaR"=-var, "abs.error"=int$abs.error,"subdiv"=int$subdivisions)
class(ans)<-"ES"
ans
}
esStable<-function(signif, alpha=1.8, beta=0, gamma=1, delta=0){
#if(alpha<1 || beta<(-1) || beta>1){stop("alpha has to be greater than 1, and\or beta is out of unit circle")}
cat("\nparameters:", alpha, beta, gamma, delta,"\n")
var<-jStable::quantStable(signif,alpha=alpha,beta=beta,gamma=1,delta=0)
B<-c(-sign(var))*beta
Th<-(atan(B*tan(pi*alpha*0.5)))/alpha
cat("VaR is:", var, "\nB value:", B, " Th value is: ",Th,"\n")
int<-integrate(i, lower=-Th, upper=pi/2, Th=Th, alpha=alpha, var=var, subdivisions=200L)
es<-(((alpha/(alpha-1))*(abs(var)/(pi*signif))*(int$value)*gamma)-delta)
ans<-list("ES"=-es, "VaR"=-var, "abs.error"=int$abs.error,"subdiv"=int$subdivisions)
class(ans)<-"ES"
ans
}
?stop
alpha
alpha<-1.8
beta<-0.4
if(alpha<1 || beta<(-1) || beta>1){stop("alpha has to be greater than 1, and\or beta is out of unit circle")}
if(alpha<1 || beta<(-1) || beta>1){stop("alpha has to be greater than 1, and or beta is out of unit circle")}
beta<-2
if(alpha<1 || beta<(-1) || beta>1){stop("alpha has to be greater than 1, and or beta is out of unit circle")}
esStable<-function(signif, alpha=1.8, beta=0, gamma=1, delta=0){
if(alpha<1 || beta<(-1) || beta>1){stop("alpha has to be greater than 1, and or beta is out of unit circle")}
cat("\nparameters:", alpha, beta, gamma, delta,"\n")
var<-jStable::quantStable(signif,alpha=alpha,beta=beta,gamma=1,delta=0)
B<-c(-sign(var))*beta
Th<-(atan(B*tan(pi*alpha*0.5)))/alpha
cat("VaR is:", var, "\nB value:", B, " Th value is: ",Th,"\n")
#special cases
if(var==0){
if(beta==0){
es<-(2*gamma(alpha/(alpha-1)))/pi
return(es)
}
es<-(2*gamma(alpha/(alpha-1))/(pi-2*Th))*(cos(Th)/cos(alpha*Th)^(1/alpha))
#there could be (cos(alpha)*Th)^1/alpha hard to say
ans<-list("ES"=-es, "VaR"=-var)
class(ans)<-"ES"
return(ans)
}
int<-integrate(i, lower=-Th, upper=pi/2, Th=Th, alpha=alpha, var=var, subdivisions=200L)
es<-(((alpha/(alpha-1))*(abs(var)/(pi*signif))*(int$value)*gamma)-delta)
ans<-list("ES"=-es, "VaR"=-var, "abs.error"=int$abs.error,"subdiv"=int$subdivisions)
class(ans)<-"ES"
ans
}
esStable<-function(signif, alpha=1.8, beta=0, gamma=1, delta=0){
if(alpha<1 || beta<(-1) || beta>1){stop("alpha has to be greater than 1, and or beta is out of unit circle")}
cat("\nparameters:", alpha, beta, gamma, delta,"\n")
var<-jStable::quantStable(signif,alpha=alpha,beta=beta,gamma=1,delta=0)
B<-c(-sign(var))*beta
Th<-(atan(B*tan(pi*alpha*0.5)))/alpha
cat("VaR is:", var, "\nB value:", B, " Th value is: ",Th,"\n")
var<-0
#special cases
if(var==0){
if(beta==0){
es<-(2*gamma(alpha/(alpha-1)))/pi
return(es)
}
es<-(2*gamma(alpha/(alpha-1))/(pi-2*Th))*(cos(Th)/cos(alpha*Th)^(1/alpha))
#there could be (cos(alpha)*Th)^1/alpha hard to say
ans<-list("ES"=-es, "VaR"=-var)
class(ans)<-"ES"
return(ans)
}
esStable(0.05)
)
esStable<-function(signif, alpha=1.8, beta=0, gamma=1, delta=0){
if(alpha<1 || beta<(-1) || beta>1){stop("alpha has to be greater than 1, and or beta is out of unit circle")}
cat("\nparameters:", alpha, beta, gamma, delta,"\n")
var<-jStable::quantStable(signif,alpha=alpha,beta=beta,gamma=1,delta=0)
B<-c(-sign(var))*beta
Th<-(atan(B*tan(pi*alpha*0.5)))/alpha
cat("VaR is:", var, "\nB value:", B, " Th value is: ",Th,"\n")
var<-0
#special cases
if(var==0){
if(beta==0){
es<-(2*gamma(alpha/(alpha-1)))/pi
return(es)
}
es<-(2*gamma(alpha/(alpha-1))/(pi-2*Th))*(cos(Th)/cos(alpha*Th)^(1/alpha))
#there could be (cos(alpha)*Th)^1/alpha hard to say
ans<-list("ES"=-es, "VaR"=-var)
class(ans)<-"ES"
return(ans)
}
int<-integrate(i, lower=-Th, upper=pi/2, Th=Th, alpha=alpha, var=var, subdivisions=200L)
es<-(((alpha/(alpha-1))*(abs(var)/(pi*signif))*(int$value)*gamma)-delta)
ans<-list("ES"=-es, "VaR"=-var, "abs.error"=int$abs.error,"subdiv"=int$subdivisions)
class(ans)<-"ES"
ans
}
esStable(0.05)
t<-esStable(0.05)
str(t)
esStable<-function(signif, alpha=1.8, beta=0, gamma=1, delta=0){
if(alpha<1 || beta<(-1) || beta>1){stop("alpha has to be greater than 1, and or beta is out of unit circle")}
cat("\nparameters:", alpha, beta, gamma, delta,"\n")
var<-jStable::quantStable(signif,alpha=alpha,beta=beta,gamma=1,delta=0)
B<-c(-sign(var))*beta
Th<-(atan(B*tan(pi*alpha*0.5)))/alpha
cat("VaR is:", var, "\nB value:", B, " Th value is: ",Th,"\n")
#special cases
if(var==0){
if(beta==0){
es<-(2*gamma(alpha/(alpha-1)))/pi
return(es)
}
es<-(2*gamma(alpha/(alpha-1))/(pi-2*Th))*(cos(Th)/cos(alpha*Th)^(1/alpha))
#there could be (cos(alpha)*Th)^1/alpha hard to say
ans<-list("ES"=-es, "VaR"=-var)
class(ans)<-"ES"
return(ans)
}
int<-integrate(i, lower=-Th, upper=pi/2, Th=Th, alpha=alpha, var=var, subdivisions=200L)
es<-(((alpha/(alpha-1))*(abs(var)/(pi*signif))*(int$value)*gamma)-delta)
ans<-list("ES"=-es, "VaR"=-var, "abs.error"=int$abs.error,"subdiv"=int$subdivisions)
class(ans)<-"ES"
ans
}
t<-esStable(0.05)
esStable<-function(signif, alpha=1.8, beta=0, gamma=1, delta=0){
if(alpha<1 || beta<(-1) || beta>1){stop("alpha has to be greater than 1, and or beta is out of unit circle")}
cat("\nparameters:", alpha, beta, gamma, delta,"\n")
var<-jStable::quantStable(signif,alpha=alpha,beta=beta,gamma=1,delta=0)
B<-c(-sign(var))*beta
Th<-(atan(B*tan(pi*alpha*0.5)))/alpha
cat("VaR is:", var, "\nB value:", B, " Th value is: ",Th,"\n")
#special cases
var<-0
if(var==0){
if(beta==0){
es<-(2*gamma(alpha/(alpha-1)))/pi
return(es)
}
es<-(2*gamma(alpha/(alpha-1))/(pi-2*Th))*(cos(Th)/cos(alpha*Th)^(1/alpha))
#there could be (cos(alpha)*Th)^1/alpha hard to say
ans<-list("ES"=-es, "VaR"=-var)
class(ans)<-"ES"
return(ans)
}
int<-integrate(i, lower=-Th, upper=pi/2, Th=Th, alpha=alpha, var=var, subdivisions=200L)
es<-(((alpha/(alpha-1))*(abs(var)/(pi*signif))*(int$value)*gamma)-delta)
ans<-list("ES"=-es, "VaR"=-var, "abs.error"=int$abs.error,"subdiv"=int$subdivisions)
class(ans)<-"ES"
ans
}
t<-esStable(0.05)
esStable<-function(signif, alpha=1.8, beta=0, gamma=1, delta=0){
if(alpha<1 || beta<(-1) || beta>1){stop("alpha has to be greater than 1, and or beta is out of unit circle")}
cat("\nparameters:", alpha, beta, gamma, delta,"\n")
var<-jStable::quantStable(signif,alpha=alpha,beta=beta,gamma=1,delta=0)
B<-c(-sign(var))*beta
Th<-(atan(B*tan(pi*alpha*0.5)))/alpha
cat("VaR is:", var, "\nB value:", B, " Th value is: ",Th,"\n")
#special cases
var<-0
if(var==0){
if(beta==0){
cat("Im in var0,beta0")
es<-(2*gamma(alpha/(alpha-1)))/pi
return(es)
}
cat("Im in var0 beta nonzero")
cat()
es<-(2*gamma(alpha/(alpha-1))/(pi-2*Th))*(cos(Th)/cos(alpha*Th)^(1/alpha))
#there could be (cos(alpha)*Th)^1/alpha hard to say
ans<-list("ES"=-es, "VaR"=-var)
class(ans)<-"ES"
return(ans)
}
if(beta==0){
cat("Im in beta 0, var nonzero case")
int<-integrate(ib,lower=0,upper=pi/2,Th=Th,alpha=alpha,var=var, subdivisions=200L)
es<-(alpha/(alpha-1))*(abs(var)/(pi*signif))*(int$value)*gamma-delta
ans<-list("ES"=-es, "VaR"=-var,"abs.error"=int$abs.error,"subdiv"=int$subdivisions)
class(ans)<-"ES"
return(ans)
}
int<-integrate(i, lower=-Th, upper=pi/2, Th=Th, alpha=alpha, var=var, subdivisions=200L)
es<-(((alpha/(alpha-1))*(abs(var)/(pi*signif))*(int$value)*gamma)-delta)
ans<-list("ES"=-es, "VaR"=-var, "abs.error"=int$abs.error,"subdiv"=int$subdivisions)
class(ans)<-"ES"
ans
}
esStable<-function(signif, alpha=1.8, beta=0, gamma=1, delta=0){
call<-match.call()
if(alpha<1 || beta<(-1) || beta>1){stop("alpha has to be greater than 1, and or beta is out of unit circle")}
cat("\nparameters:", alpha, beta, gamma, delta,"\n")
var<-jStable::quantStable(signif,alpha=alpha,beta=beta,gamma=1,delta=0)
B<-c(-sign(var))*beta
Th<-(atan(B*tan(pi*alpha*0.5)))/alpha
cat("VaR is:", var, "\nB value:", B, " Th value is: ",Th,"\n")
#special cases
var<-0
if(var==0){
if(beta==0){
cat("Im in var0,beta0")
es<-(2*gamma(alpha/(alpha-1)))/pi
ans<-list("ES"=-es, "VaR"=-var,"call="call)
class(ans)<-"ES"
return(ans)  }
cat("Im in var0 beta nonzero")
cat()
es<-(2*gamma(alpha/(alpha-1))/(pi-2*Th))*(cos(Th)/cos(alpha*Th)^(1/alpha))
#there could be (cos(alpha)*Th)^1/alpha hard to say
ans<-list("ES"=-es, "VaR"=-var)
class(ans)<-"ES"
return(ans)
}
if(beta==0){
cat("Im in beta 0, var nonzero case")
int<-integrate(ib,lower=0,upper=pi/2,Th=Th,alpha=alpha,var=var, subdivisions=200L)
es<-(alpha/(alpha-1))*(abs(var)/(pi*signif))*(int$value)*gamma-delta
ans<-list("ES"=-es, "VaR"=-var,"abs.error"=int$abs.error,"subdiv"=int$subdivisions)
class(ans)<-"ES"
return(ans)
}
int<-integrate(i, lower=-Th, upper=pi/2, Th=Th, alpha=alpha, var=var, subdivisions=200L)
es<-(((alpha/(alpha-1))*(abs(var)/(pi*signif))*(int$value)*gamma)-delta)
ans<-list("ES"=-es, "VaR"=-var, "abs.error"=int$abs.error,"subdiv"=int$subdivisions)
class(ans)<-"ES"
ans
}
V<-function(theta,Th,alpha){
(cos(alpha*Th)^(1/(alpha-1)))*((cos(theta)/sin(alpha*(Th+theta)))^(alpha/(alpha-1)))*(cos(alpha*Th+(alpha-1)*theta)/cos(theta))
}
g<-function(theta,alpha,Th){
(sin(alpha*(Th+theta)-2*theta)/(sin(alpha*(Th+theta))))-(alpha*cos(theta)*cos(theta))/(sin(alpha*(Th+theta))*sin(alpha*(Th+theta)))
}
i<-function(theta,Th,alpha,var){
g(theta,Th,alpha)*exp(V(theta,Th,alpha)*(-abs(var)^(alpha/(alpha-1))))
}
ib<-function(theta,Th,alpha,var){
gb(theta,Th,alpha)*exp(V(theta,Th,alpha)*(-abs(var)^(alpha/(alpha-1))))
}
Vb<-function(theta,alpha){((cos(theta)/sin(alpha*theta))^(alpha/(alpha-1)))*(cos(theta*(alpha-1))/cos(theta))}
gb<-function(theta,alpha){((sin((alpha-2)*theta))/sin(alpha*theta))-(alpha*cos(theta)*cos(theta))/(sin(alpha*theta)*sin(alpha*theta))}
esStable<-function(signif, alpha=1.8, beta=0, gamma=1, delta=0){
call<-match.call()
if(alpha<1 || beta<(-1) || beta>1){stop("alpha has to be greater than 1, and or beta is out of unit circle")}
cat("\nparameters:", alpha, beta, gamma, delta,"\n")
var<-jStable::quantStable(signif,alpha=alpha,beta=beta,gamma=1,delta=0)
B<-c(-sign(var))*beta
Th<-(atan(B*tan(pi*alpha*0.5)))/alpha
cat("VaR is:", var, "\nB value:", B, " Th value is: ",Th,"\n")
#special cases
var<-0
if(var==0){
if(beta==0){
cat("Im in var0,beta0")
es<-(2*gamma(alpha/(alpha-1)))/pi
ans<-list("ES"=-es, "VaR"=-var,"call="call)
class(ans)<-"ES"
return(ans)  }
cat("Im in var0 beta nonzero")
cat()
es<-(2*gamma(alpha/(alpha-1))/(pi-2*Th))*(cos(Th)/cos(alpha*Th)^(1/alpha))
#there could be (cos(alpha)*Th)^1/alpha hard to say
ans<-list("ES"=-es, "VaR"=-var)
class(ans)<-"ES"
return(ans)
}
if(beta==0){
cat("Im in beta 0, var nonzero case")
int<-integrate(ib,lower=0,upper=pi/2,Th=Th,alpha=alpha,var=var, subdivisions=200L)
es<-(alpha/(alpha-1))*(abs(var)/(pi*signif))*(int$value)*gamma-delta
ans<-list("ES"=-es, "VaR"=-var,"abs.error"=int$abs.error,"subdiv"=int$subdivisions)
class(ans)<-"ES"
return(ans)
}
int<-integrate(i, lower=-Th, upper=pi/2, Th=Th, alpha=alpha, var=var, subdivisions=200L)
es<-(((alpha/(alpha-1))*(abs(var)/(pi*signif))*(int$value)*gamma)-delta)
ans<-list("ES"=-es, "VaR"=-var, "abs.error"=int$abs.error,"subdiv"=int$subdivisions)
class(ans)<-"ES"
ans
}
esStable<-function(signif, alpha=1.8, beta=0, gamma=1, delta=0){
call<-match.call()
if(alpha<1 || beta<(-1) || beta>1){stop("alpha has to be greater than 1, and or beta is out of unit circle")}
cat("\nparameters:", alpha, beta, gamma, delta,"\n")
var<-jStable::quantStable(signif,alpha=alpha,beta=beta,gamma=1,delta=0)
B<-c(-sign(var))*beta
Th<-(atan(B*tan(pi*alpha*0.5)))/alpha
cat("VaR is:", var, "\nB value:", B, " Th value is: ",Th,"\n")
#special cases
var<-0
if(var==0){
if(beta==0){
cat("Im in var0,beta0")
es<-(2*gamma(alpha/(alpha-1)))/pi
ans<-list("ES"=(-es), "VaR"=(-var),"call="call)
class(ans)<-"ES"
return(ans)  }
cat("Im in var0 beta nonzero")
cat()
es<-(2*gamma(alpha/(alpha-1))/(pi-2*Th))*(cos(Th)/cos(alpha*Th)^(1/alpha))
#there could be (cos(alpha)*Th)^1/alpha hard to say
ans<-list("ES"=(-es), "VaR"=(-var))
class(ans)<-"ES"
return(ans)
}
if(beta==0){
cat("Im in beta 0, var nonzero case")
int<-integrate(ib,lower=0,upper=pi/2,Th=Th,alpha=alpha,var=var, subdivisions=200L)
es<-(alpha/(alpha-1))*(abs(var)/(pi*signif))*(int$value)*gamma-delta
ans<-list("ES"=-es, "VaR"=-var,"abs.error"=int$abs.error,"subdiv"=int$subdivisions)
class(ans)<-"ES"
return(ans)
}
int<-integrate(i, lower=-Th, upper=pi/2, Th=Th, alpha=alpha, var=var, subdivisions=200L)
es<-(((alpha/(alpha-1))*(abs(var)/(pi*signif))*(int$value)*gamma)-delta)
ans<-list("ES"=-es, "VaR"=-var, "abs.error"=int$abs.error,"subdiv"=int$subdivisions)
class(ans)<-"ES"
return(ans)
}
esStable<-function(signif, alpha=1.8, beta=0, gamma=1, delta=0){
call<-match.call()
#if(alpha<1 || beta<(-1) || beta>1){stop("alpha has to be greater than 1, and or beta is out of unit circle")}
cat("\nparameters:", alpha, beta, gamma, delta,"\n")
var<-jStable::quantStable(signif,alpha=alpha,beta=beta,gamma=1,delta=0)
B<-c(-sign(var))*beta
Th<-(atan(B*tan(pi*alpha*0.5)))/alpha
cat("VaR is:", var, "\nB value:", B, " Th value is: ",Th,"\n")
#special cases
var<-0
if(var==0){
if(beta==0){
cat("Im in var0,beta0")
es<-(2*gamma(alpha/(alpha-1)))/pi
ans<-list("ES"=(-es), "VaR"=(-var),"call="call)
class(ans)<-"ES"
return(ans)  }
cat("Im in var0 beta nonzero")
cat()
es<-(2*gamma(alpha/(alpha-1))/(pi-2*Th))*(cos(Th)/cos(alpha*Th)^(1/alpha))
#there could be (cos(alpha)*Th)^1/alpha hard to say
ans<-list("ES"=(-es), "VaR"=(-var))
class(ans)<-"ES"
return(ans)
}
if(beta==0){
cat("Im in beta 0, var nonzero case")
int<-integrate(ib,lower=0,upper=pi/2,Th=Th,alpha=alpha,var=var, subdivisions=200L)
es<-(alpha/(alpha-1))*(abs(var)/(pi*signif))*(int$value)*gamma-delta
ans<-list("ES"=-es, "VaR"=-var,"abs.error"=int$abs.error,"subdiv"=int$subdivisions)
class(ans)<-"ES"
return(ans)
}
int<-integrate(i, lower=-Th, upper=pi/2, Th=Th, alpha=alpha, var=var, subdivisions=200L)
es<-(((alpha/(alpha-1))*(abs(var)/(pi*signif))*(int$value)*gamma)-delta)
ans<-list("ES"=-es, "VaR"=-var, "abs.error"=int$abs.error,"subdiv"=int$subdivisions)
class(ans)<-"ES"
return(ans)
}
library(jStable)
?Vectorize
library(jStable)
quantStable(0.05,alpha=c(1.2,1.3,1.8))
library(jStable)
quantStable(0.05,alpha=c(1.2,1.3,1.8))
quantStable(0.05,alpha=c(1.2,1.3,1.8),beta=0)
stabledist::qstable(0.05,alpha=1.2,beta=0)
stabledist::qstable(0.05,alpha=1.3,beta=0)
stabledist::qstable(0.05,alpha=1.8,beta=0)
stabledist::qstable(0.05,alpha=1.8,beta=0,pm=0)
stabledist::qstable(0.05,alpha=1.2,beta=0,pm=0)
stabledist::qstable(0.05,alpha=1.2,beta=0,pm=1)
stabledist::qstable(0.05,alpha=1.2,beta=0,pm=1)==stabledist::qstable(0.05,alpha=1.2,beta=0,pm=0)
stabledist::qstable(0.05,alpha=1.2,beta=0.5,pm=1)==stabledist::qstable(0.05,alpha=1.2,beta=0.5,pm=0)
quantStable(0.05,alpha=c(1.2,1.3,1.8),beta=0.5)
stabledist::qstable(0.05,alpha=1.2,beta=0.5,pm=1)
stabledist::qstable(0.05,alpha=1.2,beta=0.5,pm=0)
library(jStable)
?match.call
library(jStable)
mleFit(rnorm(200))
library(jStable)
mleFit(rnorm(200))
library(jStable)
mleFit(rnorm(200))
library(jStable)
